/**
 * @file ngx_aret_module.c
 * @author yanshiguang02@baidu.com
 * @date 2014/03/27 08:32:27
 * @brief 
 *  
 **/

extern "C" {

#include <ngx_config.h>
#include <ngx_core.h>
#include <ngx_http.h>
}

#include <cstring>
#include <map>
#include <sstream>
#include <string>

#include "tera_easy.h"
#include "json/json.h"
#include "aret.h" 
//#include "utils.h"

using namespace teraeasy;
// =====================================================================================
/// 推荐的参数
typedef struct {
    ngx_str_t user_id;
    ngx_str_t url;
} ngx_http_aret_loc_conf_t;

typedef struct {
    ngx_str_t tag_table_name;
    ngx_str_t user_table_name;
    ngx_str_t web_table_name;
} ngx_http_aret_db_conf_t;

// 推荐的前向声明
static char *ngx_http_recommend_readconf(ngx_conf_t *cf, ngx_command_t *cmd, void *conf);
static char *ngx_http_view_readconf(ngx_conf_t *cf, ngx_command_t *cmd, void *conf);
static char *ngx_http_db_readconf(ngx_conf_t *cf, ngx_command_t *cmd, void *conf);
static char *ngx_http_post_readconf(ngx_conf_t *cf, ngx_command_t *cmd, void *conf);

/// 配置操作声明
static void *ngx_http_aret_create_main_conf(ngx_conf_t *cf);
static void *ngx_http_aret_create_loc_conf(ngx_conf_t *cf);
static char *ngx_http_aret_merge_loc_conf(ngx_conf_t *cf, void *parent, void *child);
static void *ngx_http_aret_create_svr_conf(ngx_conf_t *cf);
static char *ngx_http_aret_merge_svr_conf(ngx_conf_t *cf, void *parent, void *child);

static ngx_int_t ngx_http_recommend_handler(ngx_http_request_t *r);
static ngx_int_t ngx_http_view_handler(ngx_http_request_t *r);
static ngx_int_t ngx_http_post_handler(ngx_http_request_t *r);
// 进程级操作
static ngx_int_t ngx_http_aret_process_init(ngx_cycle_t *cycle);
static void ngx_http_aret_process_uinit(ngx_cycle_t *cycle);

// ======================================================================================

/* handler setter */
/// 指令序列
static ngx_command_t ngx_http_aret_commands[] = {
    // db conf
    { ngx_string("tag_table"),
        NGX_HTTP_MAIN_CONF|NGX_CONF_TAKE1,
        ngx_http_db_readconf,
        NGX_HTTP_MAIN_CONF_OFFSET,
        offsetof(ngx_http_aret_db_conf_t, tag_table_name),
        NULL},
    { ngx_string("user_table"),
        NGX_HTTP_MAIN_CONF|NGX_CONF_TAKE1,
        ngx_http_db_readconf,
        NGX_HTTP_MAIN_CONF_OFFSET,
        offsetof(ngx_http_aret_db_conf_t, user_table_name),
        NULL},
    { ngx_string("web_table"),
        NGX_HTTP_MAIN_CONF|NGX_CONF_TAKE1,
        ngx_http_db_readconf,
        NGX_HTTP_MAIN_CONF_OFFSET,
        offsetof(ngx_http_aret_db_conf_t, web_table_name),
        NULL},
    // handler set
    { ngx_string("recommend"),
        NGX_HTTP_LOC_CONF|NGX_CONF_TAKE1,
        ngx_http_recommend_readconf,
        NGX_HTTP_LOC_CONF_OFFSET,
        offsetof(ngx_http_aret_loc_conf_t, user_id),
        NULL },
    { ngx_string("view"),
        NGX_HTTP_LOC_CONF|NGX_CONF_TAKE1,
        ngx_http_view_readconf,
        NGX_HTTP_LOC_CONF_OFFSET,
        offsetof(ngx_http_aret_loc_conf_t, url),
        NULL },
    { ngx_string("post"),
        NGX_HTTP_LOC_CONF|NGX_CONF_NOARGS,
        ngx_http_post_readconf,
        NGX_HTTP_LOC_CONF_OFFSET,
        0,
        NULL }
};

static char*
ngx_http_post_readconf(ngx_conf_t* cf, ngx_command_t *cmd, void *conf)
{
    ngx_http_core_loc_conf_t *clcf;
    clcf = (ngx_http_core_loc_conf_t*)ngx_http_conf_get_module_loc_conf(cf, ngx_http_core_module);
    clcf->handler = ngx_http_post_handler;
    return NGX_CONF_OK;
}

// init db 
static char* 
ngx_http_db_readconf(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    //ProcessContext* ctx = ProcessContext::getInstance();
    char* ret = ngx_conf_set_str_slot(cf, cmd, conf);
    if (ret != NGX_CONF_OK)
    {
        return ret; 
    }
    ngx_str_t table = cmd->name; 
    // NOTE conf offset must be ngx_str_t type
    //ngx_str_t* table_name_val = (ngx_str_t*)((char*)conf + cmd->offset);
    //if (NULL == ctx->get("db_conf"))
    //{
    //    ctx->set("db_conf") 
    //}
    //teraeasy::Table* table_handler = teraeasy::OpenTable((char*)table_name_val->data);
    //if (table_handler == NULL)
    //{
    //    ngx_log_error(NGX_LOG_ERR, cf->log, 0, "open [%s] %s failed.", (char*)table.data, (char*)table_name_val->data); 
    //    return (char*)NGX_CONF_ERROR;
    //}
    //ctx->set(std::string((char*)table.data), (void*)table_handler);
    //ngx_log_error(NGX_LOG_ERR, cf->log, 0, "open [%s] suc, %p", table.data, table_handler);
    return NGX_CONF_OK;
}
//
/// 推荐文章 readconf
static char * ngx_http_recommend_readconf(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_http_core_loc_conf_t *clcf;
    clcf = (ngx_http_core_loc_conf_t*)ngx_http_conf_get_module_loc_conf(cf, ngx_http_core_module);
    clcf->handler = ngx_http_recommend_handler;
    ngx_conf_set_str_slot(cf,cmd,conf);
    ngx_http_aret_loc_conf_t* c = (ngx_http_aret_loc_conf_t*) conf;
    ngx_log_error(NGX_LOG_ERR, cf->log, 0, "conf value : %s %s", c->user_id.data, cmd->name.data);
    return NGX_CONF_OK;
}
/// 显示文章 readconf
static char * ngx_http_view_readconf(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_http_core_loc_conf_t *clcf;
    clcf = (ngx_http_core_loc_conf_t*)ngx_http_conf_get_module_loc_conf(cf, ngx_http_core_module);
    clcf->handler = ngx_http_view_handler;
    ngx_conf_set_str_slot(cf,cmd,conf);
    return NGX_CONF_OK;
}



/// http context
static ngx_http_module_t ngx_http_aret_module_ctx = {
    NULL, /* preconfiguration */
    NULL, /* postconfiguration */
    ngx_http_aret_create_main_conf, /* create main configuration */
    NULL, /* init main configuration */
    ngx_http_aret_create_svr_conf, /* create server configuration */
    ngx_http_aret_merge_svr_conf, /* merge server configuration */
    ngx_http_aret_create_loc_conf, /* create location configration */
    ngx_http_aret_merge_loc_conf /* merge location configration */
};

/// 模块定义
ngx_module_t ngx_http_aret_module = {
    NGX_MODULE_V1,
    &ngx_http_aret_module_ctx, /* module context */
    ngx_http_aret_commands, /* module directives */
    NGX_HTTP_MODULE, /* module type */
    NULL, /* init master */
    NULL, /* init module */
    &ngx_http_aret_process_init, /* init process */
    NULL, /* init thread */
    NULL, /* exit thread */
    &ngx_http_aret_process_uinit, /* exit process */
    NULL, /* exit master */
    NGX_MODULE_V1_PADDING
};

//static char* str_to_buf(ngx_pool_t* pool, const std::string& str)
//{
//    char* ret_buf = (char*) ngx_pcalloc(pool, str.size());
//    memcpy(ret_buf, str.data(), str.size());
//    return ret_buf;
//}

static ngx_int_t
do_response(ngx_http_request_t *r)
{
    r->headers_out.content_type.len = sizeof("text/html") - 1;
    r->headers_out.content_type.data = (u_char *) "text/html";
    r->headers_out.status = NGX_HTTP_OK;
    r->headers_out.content_length_n = 0;
    ngx_buf_t* b; 
    b = (ngx_buf_t*)ngx_pcalloc(r->pool, sizeof(ngx_buf_t));
    b->pos = NULL;
    b->last = NULL;
    ngx_chain_t out;
    out.buf = b;
    out.next = NULL;
    ngx_http_send_header(r);
    return ngx_http_output_filter(r, &out);
}

static void 
ngx_http_read_body_handler(ngx_http_request_t *r)
{
    if (r->request_body)
    {
        ngx_chain_t* cl; 
        for (cl = r->request_body->bufs;cl;cl=cl->next)
        {
            ngx_log_error(NGX_LOG_ERR, r->connection->log, 0, "post %s", cl->buf->pos) ;
        }
    }

    return ngx_http_finalize_request(r, do_response(r));
}

static ngx_int_t ngx_http_post_handler(ngx_http_request_t *r)
{
    ngx_int_t rc;     
    if (!(r->method & NGX_HTTP_POST))
    {
        return NGX_HTTP_NOT_ALLOWED;
    }
    rc = ngx_http_read_client_request_body(r, ngx_http_read_body_handler);
    return rc;
}

#define MAX_RESP_BUF 1024*10
// Handler
static ngx_int_t ngx_http_recommend_handler(ngx_http_request_t *r)
{
    ProcessContext* ctx = ProcessContext::getInstance();
    ctx = ctx;
    static std::string last_key = "";
    ngx_int_t rc;
    ngx_buf_t *b;
    ngx_chain_t out;
    ngx_http_aret_loc_conf_t *elcf;
    elcf = (ngx_http_aret_loc_conf_t*) ngx_http_get_module_loc_conf(r, ngx_http_aret_module);
    //if(!(r->method & (NGX_HTTP_HEAD|NGX_HTTP_GET|NGX_HTTP_POST)))
    //{
    //    return NGX_HTTP_NOT_ALLOWED;
    //}

    // 从TagTable选一段作为推荐内容
    Table* tag_table =  (Table*)ctx->get("tag_table");
    ngx_log_error(NGX_LOG_ERR, r->connection->log, 0, "table_handler %p", tag_table);
    if (tag_table == NULL) 
    {
        ngx_log_error(NGX_LOG_ERR, r->connection->log, 0, "get table handler failed.");
        return NGX_ERROR; 
    }

    TableSlice slice;
    tag_table->Scan(last_key, "~", &slice);
    int num = 0;
    std::string key;
    json_object* json_result = json_object_new_array(); 
    for (TableSlice::iterator it = slice.begin(); it != slice.end(); ++it)
    {
        Record& record= it->second;
        const std::string url = record["url"].begin()->second;
        const std::string title = record["title"].begin()->second;
        json_object* json_obj = json_object_new_object();
        json_object* json_url = json_object_new_string(url.c_str());
        json_object* json_title = json_object_new_string(title.c_str());
        json_object_object_add(json_obj, "url", json_url);
        json_object_object_add(json_obj, "title", json_title);
        json_object_array_add(json_result, json_obj);


        if (++num > 10)
            break;
        key = it->first;
    }
    last_key = key;
    json_object* json_content = json_object_new_object();
    json_object_object_add(json_content, "content", json_result);
    delete tag_table;
    char send_buf[MAX_RESP_BUF]; 
    int len = snprintf(send_buf, MAX_RESP_BUF, "%s", json_object_to_json_string(json_content));
    ngx_log_error(NGX_LOG_ERR, r->connection->log, 0, "%s", send_buf);

    r->headers_out.content_type.len = sizeof("text/html") - 1;
    r->headers_out.content_type.data = (u_char *) "text/html";
    r->headers_out.status = NGX_HTTP_OK;
    r->headers_out.content_length_n = len;
    if(r->method == NGX_HTTP_HEAD)
    {
        rc = ngx_http_send_header(r);
        if(rc != NGX_OK)
        {
            return rc;
        }
    }
    b = (ngx_buf_t*)ngx_pcalloc(r->pool, sizeof(ngx_buf_t));
    if(b == NULL)
    {
        ngx_log_error(NGX_LOG_ERR, r->connection->log, 0, "Failed to allocate response buffer.");
        return NGX_HTTP_INTERNAL_SERVER_ERROR;
    }
    out.buf = b;
    out.next = NULL;
    b->pos = (u_char*)send_buf;//elcf->user_id.data;
    b->last = b->pos + len;//elcf->user_id.data + (elcf->user_id.len);
    b->memory = 1;
    b->last_buf = 1;
    rc = ngx_http_send_header(r);
    json_object_put(json_result); 
    if(rc != NGX_OK)
    {
        return rc;
    }
    return ngx_http_output_filter(r, &out);
}

/// 根据url从网页库获取html
bool get_html(const std::string& url, std::string *html) {
    Table* table = teraeasy::OpenTable("WebTable");
    Record record;
    if (table->Read(url, &record) && !record.empty())
    {
        Column& page = record["page"];
        if (!page.empty())
        {
            std::string& htmlstr = page.begin()->second;
            html->assign(htmlstr);
        }
    }
    delete table;
    return !html->empty();
}

//static void ngx_client_read_body_handler(ngx_http_request_t *r)
//{
//    r->headers_out.status = NGX_HTTP_OK;
//    ngx_log_error(NGX_LOG_ERR, r->connection->log, 0, "content_len:%s", r->headers_in.content_length->value.data);
//    ngx_log_error(NGX_LOG_ERR, r->connection->log, 0, "hehe : %s", r->request_body->buf->pos);
//    return ngx_http_finalize_request(r, NGX_OK);    
//}

/// View Handler
static ngx_int_t ngx_http_view_handler(ngx_http_request_t *r)
{
    ngx_int_t rc;
    ngx_buf_t *b;
    ngx_chain_t out;
    ngx_http_aret_loc_conf_t *elcf;
    elcf = (ngx_http_aret_loc_conf_t*)ngx_http_get_module_loc_conf(r, ngx_http_aret_module);
    //rc = ngx_http_read_client_request_body(r, ngx_client_read_body_handler);
    //if (rc >= NGX_HTTP_SPECIAL_RESPONSE)
    //{
    //    return rc; 
    //}

    //return NGX_DONE;

    ngx_log_error(NGX_LOG_ERR, r->connection->log, 0, "LEO:%s" , r->args.data, r->args.len);

    std::string url;
    std::string args_str((char*)r->args.data, r->args.len);
    ngx_log_error(NGX_LOG_ERR, r->connection->log, 0, "args:  %s", args_str.c_str());
    std::stringstream ss(args_str);
    std::string temp;
    std::map<std::string, std::string> argsMap;
    while (std::getline(ss, temp, '&'))
    {
        size_t pos = temp.find_first_of('=', 0);
        argsMap.insert(std::pair<std::string, std::string>(temp.substr(0, pos), temp.substr(pos+1)));
        ngx_log_error(NGX_LOG_ERR, r->connection->log, 0, "%s : %s", temp.substr(0, pos).c_str(), temp.substr(pos+1).c_str());
    }
    
    Table* user_table =  OpenTable("UserTable");
    //Column c1;
    //c1[0] = argsMap["imdi"];
    Column c2;
    c2[0] = argsMap["key"];
    Record record;
    //record.insert(std::pair<std::string, std::string>("imdi", c1));
    record["url"] = c2;
    if (!user_table->Write(argsMap["imdi"], record))
    {
        r->headers_out.status =NGX_HTTP_BAD_REQUEST;
    }
    else 
    {
        r->headers_out.status = NGX_HTTP_OK;
    }
    delete user_table;
    //char* send_buf = str_to_buf(r->pool, html);
    r->headers_out.content_type.len = sizeof("text/html") - 1;
    r->headers_out.content_type.data = (u_char *) "text/html";
    r->headers_out.content_length_n = 0;
    //r->headers_out.content_length_n = html.size();
    if(r->method == NGX_HTTP_HEAD)
    {
        rc = ngx_http_send_header(r);
        if(rc != NGX_OK)
        {
            return rc;
        }
    }
    b = (ngx_buf_t*)ngx_pcalloc(r->pool, sizeof(ngx_buf_t));
    if(b == NULL)
    {
        ngx_log_error(NGX_LOG_ERR, r->connection->log, 0, "Failed to allocate response buffer.");
        return NGX_HTTP_INTERNAL_SERVER_ERROR;
    }
    out.buf = b;
    out.next = NULL;
    b->pos = NULL;
    b->last =NULL; 
    b->memory = 1;
    b->last_buf = 1;
    rc = ngx_http_send_header(r);
    if(rc != NGX_OK)
    {
        return rc;
    }
    return ngx_http_output_filter(r, &out);
}

static void *ngx_http_aret_create_svr_conf(ngx_conf_t *cf)
{
    ngx_http_aret_db_conf_t *conf;
    conf = (ngx_http_aret_db_conf_t*)ngx_pcalloc(cf->pool, sizeof(ngx_http_aret_db_conf_t));
    if (conf == NULL)
    {
        return NGX_CONF_ERROR;
    }
    return conf;
}

static char *ngx_http_aret_merge_svr_conf(ngx_conf_t *cf, void *parent, void *child)
{
    return NGX_CONF_OK;
}

static void *ngx_http_aret_create_main_conf(ngx_conf_t *cf)
{
    ngx_http_aret_db_conf_t *conf;
    conf = (ngx_http_aret_db_conf_t*)ngx_pcalloc(cf->pool, sizeof(ngx_http_aret_db_conf_t));
    if (conf == NULL)
    {
        return NGX_CONF_ERROR;
    }
    return conf;
}
static void * ngx_http_aret_create_loc_conf(ngx_conf_t *cf)
{
    ngx_http_aret_loc_conf_t *conf;
    conf = (ngx_http_aret_loc_conf_t*)ngx_pcalloc(cf->pool, sizeof(ngx_http_aret_loc_conf_t));
    if (conf == NULL) {
        return NGX_CONF_ERROR;
    }
    conf->user_id.len = 0;
    conf->user_id.data = NULL;
    conf->url.len = 0;
    conf->url.data = NULL;
    return conf;
}

///
static char *ngx_http_aret_merge_loc_conf(ngx_conf_t *cf, void *parent, void *child)
{
    ngx_http_aret_loc_conf_t *prev = (ngx_http_aret_loc_conf_t*)parent;
    ngx_http_aret_loc_conf_t *conf = (ngx_http_aret_loc_conf_t*)child;
    ngx_conf_merge_str_value(conf->user_id, prev->user_id, "");
    ngx_conf_merge_str_value(conf->user_id, prev->url, "");
    return NGX_CONF_OK;
}

// ======================  process level ========================

static ngx_int_t ngx_http_aret_process_init(ngx_cycle_t *cycle)
{
    ngx_http_aret_db_conf_t* db_conf;
    ProcessContext *ctx = ProcessContext::getInstance();
    
    db_conf = (ngx_http_aret_db_conf_t*)ngx_http_cycle_get_module_main_conf(cycle, ngx_http_aret_module);
    if (db_conf == NULL)
    {
        ngx_log_error(NGX_LOG_ERR, cycle->log, 0, "get srv conf failed."); 
        return NGX_ERROR;
    }
    
    if (db_conf->tag_table_name.len != 0) 
    {
        teraeasy::Table* table = teraeasy::OpenTable((char*)db_conf->tag_table_name.data); 
        if (table == NULL)
        {
            ngx_log_error(NGX_LOG_ERR, cycle->log, 0, "open %s failed.", \
                    (char*)db_conf->tag_table_name.data); 
            return NGX_ERROR;
        }
        ctx->set("tag_table", (void*)table);
        ngx_log_error(NGX_LOG_ERR, cycle->log, 0, "open %s suc", \
                (char*)db_conf->tag_table_name.data);
    }

    if (db_conf->user_table_name.len != 0)
    {
        teraeasy::Table* table = teraeasy::OpenTable((char*)db_conf->user_table_name.data); 
        if (table == NULL)
        {
            ngx_log_error(NGX_LOG_ERR, cycle->log, 0, "open %s failed.", \
                    (char*)db_conf->tag_table_name.data); 
            return NGX_ERROR;
        }
        ctx->set("user_table", (void*)table);
    }

    if (db_conf->web_table_name.len != 0)
    {
        teraeasy::Table* table = teraeasy::OpenTable((char*)db_conf->web_table_name.data); 
        if (table == NULL)
        {
            ngx_log_error(NGX_LOG_ERR, cycle->log, 0, "open %s failed.", \
                    (char*)db_conf->tag_table_name.data); 
            return NGX_ERROR;
        }
        ctx->set("web_table", (void*)table);
    }
    return NGX_OK;
}
    
static void ngx_http_aret_process_uinit(ngx_cycle_t *cycle)
{
    return ;
}

// ==============================================================

/* vim: set expandtab ts=4 sw=4 sts=4 tw=100: */
